using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Immutable;
using System.Text;

namespace AutoGeneratedSystem.Client.Generators
{
    [Generator]
    public class BlazorPagesIncrementalGenerator : IIncrementalGenerator
    {
        private const string BlazorWasmPageOfEntityAttribute = "BlazorWasmPageOfEntity";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
#if DEBUG
            //System.Diagnostics.Debugger.Launch();
#endif
            // Combine the selected interfaces with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<AdditionalText>)>
                compilationAndAdditionalFiles
                = context.CompilationProvider.Combine(context.AdditionalTextsProvider.Collect());

            // Generate the source using the compilation and classes
            context.RegisterSourceOutput(compilationAndAdditionalFiles,
                static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        static void Execute(Compilation compilation,
            ImmutableArray<AdditionalText> additionalTexts, SourceProductionContext context)
        {
            foreach (var singleAdditionalText in additionalTexts)
            {
                if (singleAdditionalText.Path.EndsWith("AutoGeneratePages.txt"))
                {
                    var allFileLines = File.ReadAllLines(singleAdditionalText.Path);
                    foreach (var singleFileLine in allFileLines)
                    {
                        var entityName = Directory.GetParent(singleAdditionalText.Path).Name;
                        switch (singleFileLine)
                        {
                            case "Create":
                                StringBuilder razorCreatePage = new StringBuilder();
                                razorCreatePage.AppendLine($"@page \"/{entityName}/Create\"");
                                razorCreatePage.AppendLine($"<h3>{entityName}</h3>");
                                var parentFolderPath = Path.GetDirectoryName(singleAdditionalText.Path);
                                var newFilePath = Path.Combine(parentFolderPath, "Create.razor");
                                File.WriteAllText(newFilePath, razorCreatePage.ToString());
                                break;
                        }
                    }
                }
            }
        }
    }
}
