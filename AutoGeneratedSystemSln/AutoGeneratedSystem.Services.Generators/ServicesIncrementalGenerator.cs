using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Text;

namespace AutoGeneratedSystem.Services.Generators
{
    [Generator]
    public class ServicesIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
#if DEBUG
            //System.Diagnostics.Debugger.Launch();
#endif
            // Do a simple filter for enums
            IncrementalValuesProvider<ClassDeclarationSyntax> classDeclarations =
                context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => IsSyntaxTargetForGeneration(s), // select enums with attributes
                    transform: static (ctx, _) => GetSemanticTargetForGeneration(ctx)) // sect the enum with the [EnumExtensions] attribute
                .Where(static m => m is not null)!; // filter out attributed enums that we don't care about

            // Combine the selected interfaces with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax>)>
                compilationAndClasses
                = context.CompilationProvider.Combine(classDeclarations.Collect());

            // Generate the source using the compilation and classes
            context.RegisterSourceOutput(compilationAndClasses,
                static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        private static ClassDeclarationSyntax GetSemanticTargetForGeneration(GeneratorSyntaxContext generatorSyntaxContext)
        {
            var classDeclarationSyntax = generatorSyntaxContext.Node as ClassDeclarationSyntax;
            return classDeclarationSyntax!;
        }

        private static bool IsSyntaxTargetForGeneration(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax)
            {
                ClassDeclarationSyntax classDeclarationSyntax = (ClassDeclarationSyntax)syntaxNode;
                foreach (var singleAttributeList in classDeclarationSyntax.AttributeLists)
                {
                    foreach (var singleAttribute in singleAttributeList.Attributes)
                    {
                        var identifierNameSyntax = (singleAttribute.Name) as IdentifierNameSyntax;
                        string identifierText = identifierNameSyntax!.Identifier.Text;
                        if (identifierText == "ServiceOfEntity")
                            return true;
                    }
                }
            }
            return false;
        }

        static void Execute(Compilation compilation,
            ImmutableArray<ClassDeclarationSyntax> classesDeclarationSyntax, SourceProductionContext context)
        {
            foreach (var singleClassDeclarationSyntax in classesDeclarationSyntax)
            {
                var serviceName = singleClassDeclarationSyntax.Identifier.Text;
                foreach (var singleAttributeList in singleClassDeclarationSyntax.AttributeLists)
                {
                    foreach (var singleAttribute in singleAttributeList.Attributes)
                    {
                        var identifierNameSyntax = (singleAttribute.Name) as IdentifierNameSyntax;
                        string identifierText = identifierNameSyntax!.Identifier.Text;
                        if (identifierText == "ServiceOfEntity")
                        {
                            var entityNameArgument = singleAttribute.ArgumentList!.Arguments[0];
                            var entityNameMemberAccessExpressionSyntax = entityNameArgument.Expression as MemberAccessExpressionSyntax;
                            var entityNameSimpleNameSyntax = entityNameMemberAccessExpressionSyntax!.Name;
                            var entityName = entityNameSimpleNameSyntax.Identifier.Text;

                            var createFileArgument = singleAttribute.ArgumentList!.Arguments[1];
                            var createFileMemberAccessExpressionSyntax = createFileArgument.Expression as LiteralExpressionSyntax;
                            var createFileExpressionToken = createFileMemberAccessExpressionSyntax!.Token as SyntaxToken?;
                            var createFileValue = Convert.ToBoolean(createFileExpressionToken.Value!.Value);
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.AppendLine("using System.Threading.Tasks;");
                            stringBuilder.AppendLine("using AutoGeneratedSystem.DataAccess.Data;");
                            stringBuilder.AppendLine("using AutoGeneratedSystem.DataAccess.Models;");
                            stringBuilder.AppendLine("using System.Linq;");
                            stringBuilder.AppendLine("namespace AutoGeneratedSystem.Services");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"public partial class {serviceName}");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine("private readonly AutogeneratedsystemDatabaseContext _autogeneratedsystemDatabaseContext;");
                            stringBuilder.AppendLine($"public {serviceName}(AutogeneratedsystemDatabaseContext autogeneratedsystemDatabaseContext)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine("_autogeneratedsystemDatabaseContext = autogeneratedsystemDatabaseContext;");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine($"public async Task<{entityName}> Create{entityName}Async({entityName} entity, CancellationToken cancellationToken)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"await _autogeneratedsystemDatabaseContext.{entityName}.AddAsync(entity,cancellationToken);");
                            stringBuilder.AppendLine($"await _autogeneratedsystemDatabaseContext.SaveChangesAsync(cancellationToken);");
                            stringBuilder.AppendLine($"return entity;");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine($"public IQueryable<{entityName}> GetAll{entityName}(CancellationToken cancellationToken)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"return _autogeneratedsystemDatabaseContext.{entityName};");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("}");
                            if (createFileValue)
                            {
                                var projectBaseDirectory  = (compilation.Options.SourceReferenceResolver as SourceFileResolver)!.BaseDirectory;
                                var assembly = compilation.Assembly;
                                var sourceModule = compilation.SourceModule;
                                string outputFilePath =
                                    Path.Combine(projectBaseDirectory, $"{entityName}Service.g.cs");
                                File.WriteAllText(outputFilePath, stringBuilder.ToString());
                            }
                            else
                            {
                                context.AddSource($"{serviceName}.g.cs",
                        SourceText.From(stringBuilder.ToString(), Encoding.UTF8));
                            }
                        }
                    }
                }
            }
        }
    }
}
