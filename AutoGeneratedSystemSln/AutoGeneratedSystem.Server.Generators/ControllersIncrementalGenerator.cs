using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Immutable;
using System.Text;

namespace AutoGeneratedSystem.Server.Generators
{
    [Generator]
    public class ControllersIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
#if DEBUG
            //System.Diagnostics.Debugger.Launch();
#endif
            // Do a simple filter for enums
            IncrementalValuesProvider<ClassDeclarationSyntax> classDeclarations =
                context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => IsSyntaxTargetForGeneration(s), // select enums with attributes
                    transform: static (ctx, _) => GetSemanticTargetForGeneration(ctx)) // sect the enum with the [EnumExtensions] attribute
                .Where(static m => m is not null)!; // filter out attributed enums that we don't care about

            // Combine the selected interfaces with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax>)>
                compilationAndClasses
                = context.CompilationProvider.Combine(classDeclarations.Collect());

            // Generate the source using the compilation and classes
            context.RegisterSourceOutput(compilationAndClasses,
                static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        private static ClassDeclarationSyntax GetSemanticTargetForGeneration(GeneratorSyntaxContext generatorSyntaxContext)
        {
            var classDeclarationSyntax = generatorSyntaxContext.Node as ClassDeclarationSyntax;
            return classDeclarationSyntax!;
        }

        private static bool IsSyntaxTargetForGeneration(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax)
            {
                ClassDeclarationSyntax classDeclarationSyntax = (ClassDeclarationSyntax)syntaxNode;
                foreach (var singleAttributeList in classDeclarationSyntax.AttributeLists)
                {
                    foreach (var singleAttribute in singleAttributeList.Attributes)
                    {
                        var identifierNameSyntax = (singleAttribute.Name) as IdentifierNameSyntax;
                        string identifierText = identifierNameSyntax!.Identifier.Text;
                        if (identifierText == "ControllerOfEntity")
                            return true;
                    }
                }
            }
            return false;
        }

        static void Execute(Compilation compilation,
            ImmutableArray<ClassDeclarationSyntax> classesDeclarationSyntax, SourceProductionContext context)
        {
            foreach (var singleClassDeclarationSyntax in classesDeclarationSyntax)
            {
                var controllerName = singleClassDeclarationSyntax.Identifier.Text;
                foreach (var singleAttributeList in singleClassDeclarationSyntax.AttributeLists)
                {
                    foreach (var singleAttribute in singleAttributeList.Attributes)
                    {
                        var identifierNameSyntax = (singleAttribute.Name) as IdentifierNameSyntax;
                        string identifierText = identifierNameSyntax!.Identifier.Text;
                        if (identifierText == "ControllerOfEntity")
                        {
                            var argument = singleAttribute.ArgumentList!.Arguments.Single();
                            var memberAccessExpressionSyntax = argument.Expression as MemberAccessExpressionSyntax;
                            var simpleNameSyntax = memberAccessExpressionSyntax!.Name;
                            var entityName = simpleNameSyntax.Identifier.Text;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.AppendLine("using System.Threading.Tasks;");
                            stringBuilder.AppendLine("using Microsoft.AspNetCore.Mvc;");
                            stringBuilder.AppendLine("using AutoGeneratedSystem.Services;");
                            stringBuilder.AppendLine("using AutoGeneratedSystem.DataAccess.Data;");
                            stringBuilder.AppendLine("using AutoGeneratedSystem.DataAccess.Models;");
                            stringBuilder.AppendLine($"using AutoGeneratedSystem.Models.{entityName};");
                            stringBuilder.AppendLine($"using AutoMapper;");
                            stringBuilder.AppendLine("using Microsoft.EntityFrameworkCore;");
                            stringBuilder.AppendLine("namespace AutoGeneratedSystem.Server.Controllers");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"public partial class {controllerName}");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine("[HttpPost(\"[action]\")]");
                            stringBuilder.AppendLine($"public async Task<{entityName}Model> Create{entityName}(Create{entityName}Model create{entityName}Model, CancellationToken cancellationToken," +
                                $"[FromServices] {entityName}Service {entityName}Service, [FromServices] IMapper mapper)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"var mappedEntity = mapper.Map<Create{entityName}Model,{entityName}>(create{entityName}Model);");
                            stringBuilder.AppendLine($"var resultEntity = await {entityName}Service.Create{entityName}Async(mappedEntity, cancellationToken);");
                            stringBuilder.AppendLine($"var resultModel = mapper.Map<{entityName},{entityName}Model>(resultEntity);");
                            stringBuilder.AppendLine($"return resultModel;");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("[HttpGet(\"[action]\")]");
                            stringBuilder.AppendLine($"public async Task<{entityName}Model[]> GetAll{entityName}(" +
                                $"[FromServices] {entityName}Service {entityName}Service, [FromServices] IMapper mapper,CancellationToken cancellationToken)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"var query = {entityName}Service.GetAll{entityName}(cancellationToken);");
                            stringBuilder.AppendLine($"var mappedQuery = query.Select(p=>mapper.Map<{entityName},{entityName}Model>(p));");
                            stringBuilder.AppendLine("var result = await mappedQuery.ToArrayAsync();");
                            stringBuilder.AppendLine("return result;");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("[HttpDelete(\"[action]\")]");
                            stringBuilder.AppendLine($"public async Task<IActionResult> Delete{entityName}(Delete{entityName}Model {entityName}Model, [FromServices] {entityName}Service {entityName}Service, [FromServices] IMapper mapper, CancellationToken cancellationToken)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"var entity = mapper.Map<Delete{entityName}Model, {entityName}>({entityName}Model);");
                            stringBuilder.AppendLine($"await {entityName}Service.Delete{entityName}Async(entity, cancellationToken);");
                            stringBuilder.AppendLine("return Ok();");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("[HttpPut(\"[action]\")]");
                            stringBuilder.AppendLine($"public async Task<{entityName}Model> Update{entityName}({entityName}Model {entityName}Model, [FromServices] {entityName}Service {entityName}Service, [FromServices] IMapper mapper, CancellationToken cancellationToken)");
                            stringBuilder.AppendLine("{");
                            stringBuilder.AppendLine($"var {entityName}Entity = mapper.Map<{entityName}Model, {entityName}>({entityName}Model);");
                            stringBuilder.AppendLine($"var updated{entityName}Entity = await {entityName}Service.Update{entityName}Async({entityName}Entity, cancellationToken);");
                            stringBuilder.AppendLine($"var updated{entityName}Model = mapper.Map<{entityName}, {entityName}Model>(updated{entityName}Entity);");
                            stringBuilder.AppendLine($"return updated{entityName}Model;");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("}");
                            stringBuilder.AppendLine("}");
                            context.AddSource($"{controllerName}.g.cs",
                        SourceText.From(stringBuilder.ToString(), Encoding.UTF8));
                        }
                    }
                }
            }
        }
    }
}
